views.py

from django.shortcuts import render
from django.contrib.auth.decorators import login_required
from django.http import JsonResponse
from openai import OpenAI
from django.conf import settings
import json


def display_home(request):
  return render(request, "home.html")


@login_required
def explore_page(request):
  return render(request, "explore.html")


def chatbot_response(request):
  if request.method == 'POST':
    try:
      client = OpenAI(api_key=settings.CHATGPT_API_KEY)
      data = json.loads(request.body)
      user_message = data.get('message')
      if not isinstance(user_message, str):
        return JsonResponse({'error': 'Invalid message format'}, status=400)

      completion = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
          {"role": "system", "content": "You are a helpful travel assistant. Help people looking to vacation/relocate find a destination."},
          {"role": "user", "content": user_message}
        ]
      )
      chatbot_message = completion.choices[0].message.content
      return JsonResponse({'response': chatbot_message})
    except Exception as e:
      print("Error:", e)
      return JsonResponse({'error': 'An error occurred processing your request.'}, status=500)

-------------------------------------------------------------------------------------------
urls.py

"""
URL configuration for project project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""

from django.contrib import admin
from django.urls import include, path
from user.views import register_user,account_delete ,login_user, logout_user, manage_account, account_emailchange,account_passwordreset
from app.views import display_home, explore_page, chatbot_response

urlpatterns = [
  path("admin/", admin.site.urls),
  path("__reload__/", include("django_browser_reload.urls")),
  path("", display_home, name="home"),
  path("register/", register_user, name="register"),
  path("login/", login_user, name="login"),
  path("logout/", logout_user, name="logout"),
  path("explore/", explore_page, name="explore"),
  path("account/", manage_account, name="account_settings"),
  path("emailchange/", account_emailchange, name="account_emailchange"),
  path("resetpassword/", account_passwordreset, name="account_passwordreset"),
  path("delete/", account_delete, name="account_delete"),
  path("accounts/", include("allauth.urls")),
  path('accounts/', include('allauth.socialaccount.urls')),
  path('admin/', admin.site.urls),
  path('api/chatbot/', chatbot_response, name="chatbot_response")
]

-------------------------------------------------------------------------------
settings.py

"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from dotenv import load_dotenv
import os

load_dotenv()
GOOGLE_CLIENT_ID = os.getenv('GOOGLE_CLIENT_ID')
if not GOOGLE_CLIENT_ID:
    raise ValueError(
        'GOOGLE_CLIENT_ID is missing.' 
        'Have you put it in a file at .env ?'
    )

CHATGPT_API_KEY = os.getenv('CHATGPT_API_KEY')
if not CHATGPT_API_KEY:
    raise ValueError(
        'CHATGPT_API_KEY is missing.' 
        'Have you put it in a file at .env ?'
    )
SECURE_REFERRER_POLICY = 'no-referrer-when-downgrade'
SECURE_CROSS_ORIGIN_OPENER_POLICY = "same-origin-allow-popups"

SOCIALACCOUNT_LOGIN_ON_GET=True
SOCIALACCOUNT_AUTO_SIGNUP = True
SESSION_COOKIE_AGE = 604800  # One week

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-zl0-v1jqq8wogbxvm@^q8wc3rr4u)1p^nf66(w(v&-d)!qjovu"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
  "app.apps.AppConfig",
  "django.contrib.admin",
  "django.contrib.auth",
  "django.contrib.contenttypes",
  "django.contrib.sessions",
  "django.contrib.messages",
  "django.contrib.staticfiles",
  "tailwind",
  "theme",
  "django_browser_reload",
  "allauth",
  "allauth.account",
  "allauth.socialaccount",
  "allauth.socialaccount.providers.google",
  "user",
]

MIDDLEWARE = [
  "django.middleware.security.SecurityMiddleware",
  "django.contrib.sessions.middleware.SessionMiddleware",
  "django.middleware.common.CommonMiddleware",
  "django.middleware.csrf.CsrfViewMiddleware",
  "django.contrib.auth.middleware.AuthenticationMiddleware",
  "django.contrib.messages.middleware.MessageMiddleware",
  "django.middleware.clickjacking.XFrameOptionsMiddleware",
  "django_browser_reload.middleware.BrowserReloadMiddleware",
  "allauth.account.middleware.AccountMiddleware",
]

ROOT_URLCONF = "project.urls"

TEMPLATES = [
  {
    "BACKEND": "django.template.backends.django.DjangoTemplates",
    "DIRS": [BASE_DIR / "templates"],
    "APP_DIRS": True,
    "OPTIONS": {
      "context_processors": [
        "django.template.context_processors.debug",
        "django.template.context_processors.request",
        "django.contrib.auth.context_processors.auth",
        "django.contrib.messages.context_processors.messages",
        'user.context_processor.google_settings',
      ],
    },
  },
]

WSGI_APPLICATION = "project.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.postgresql",
#         "NAME": "mydatabase",
#         "USER": "mydatabaseuser",
#         "PASSWORD": "mypassword",
#         "HOST": "127.0.0.1",
#         "PORT": "5432",
#     }
# }

DATABASES = {
  "default": {
    "ENGINE": "django.db.backends.postgresql",
    "NAME": os.getenv("DB_NAME"),
    "USER": os.getenv("DB_USER"),
    "PASSWORD": os.getenv("DB_PASSWORD"),
    "HOST": os.getenv("DB_HOST"),
    "PORT": os.getenv("DB_PORT"),
  }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
  {
    "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
  },
  {
    "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
  },
  {
    "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
  },
  {
    "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
  },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "/static/"
STATICFILES_DIRS = [
    BASE_DIR / "static",
]
# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

#  Django-Tailwind config
TAILWIND_APP_NAME = "theme"
INTERNAL_IPS = [
  "127.0.0.1",
]

LOGIN_URL = 'login'  # or whatever your login URL name is
LOGIN_REDIRECT_URL = 'explore'  # where to redirect after successful login

AUTHENTICATION_BACKENDS = [
  # Needed to login by username in Django admin, regardless of `allauth`
  "django.contrib.auth.backends.ModelBackend",
  # `allauth` specific authentication methods, such as login by email
  "allauth.account.auth_backends.AuthenticationBackend",
]

------------------------------------------------------------------------------

explore.html

{% extends 'layouts/mainpage.html' %}
{% block content %}
<body>
    
<form class="max-w-sm mx-auto flex flex-col justify-center pt-20" onsubmit="sendMessage(event)">
    <label for="message" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Ask our Model</label>
    <textarea id="message" rows="4" class="block p-2.5 w-full text-md text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="Enter a prompt"></textarea>
    
    <button type="submit" class="mt-4 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 focus:ring-2 focus:ring-blue-500">Send</button>
  </form>

  <div id="chatbotResponse" class="max-w-sm mx-auto mt-4 p-4 bg-gray-100 rounded-lg border border-gray-300 dark:bg-gray-800 dark:border-gray-700 text-gray-900 dark:text-white"></div>
 
 <script>
  async function sendMessage(event) {
    event.preventDefault();
    const userMessage = document.getElementById('message').value;

    const response = await fetch('/api/chatbot/', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRFToken': getCookie('csrftoken')
      },
      body: JSON.stringify({ message: userMessage }),
    });
    const data = await response.json();

    document.getElementById('chatbotResponse').innerText = data.response;

    document.getElementById('message').value = '';
  }

  //FUnction to get the CSRF token for Django
  function getCookie(name) {
    let cookieValue = null;
    if (document.cookie !== ''){
      const cookies = document.cookie.split(';');
      for (let i = 0; i < cookies.length; i++) {
        const cookie = cookies[i].trim();
        if (cookie.substring(0, name.length + 1) === (name + '=')) {
          cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
          break;
        }
      }
    }
    return cookieValue;
  }

  </script>
  
</body>
{%endblock%}

---------------------------------------------------------------------------------------
.env
DB_NAME = postgres
DB_USER = postgres
DB_PASSWORD = Huck2020
DB_HOST = localhost
DB_PORT = 5432
CHATGPT_API_KEY=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
GOOGLE_CLIENT_ID=856988897287-8g4dgtaftd88oha5b673n1aoaat1lvtn.apps.googleusercontent.com
----------------------------------------------------------------------------------------